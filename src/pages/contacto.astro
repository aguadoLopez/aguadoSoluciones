---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  {/* Contenedor principal con posición relativa para controlar el diseño */}
  <div class="relative lg:h-[75vh] md:h-[75vh] h-screen w-full overflow-hidden">

    {/* Imagen de fondo posicionada absolutamente para cubrir parte de la pantalla */}
    <div class="absolute lg:top-0 md:top-[40%] top-[60%] right-0 z-0 lg:w-[40%] md:w-full sm:w-full lg:h-screen md:h-[40vh] overflow-hidden">
      <img src="/img/ladrillos.jpg" alt="fondo" class="lg:h-[100%] w-full object-cover object-top">
    </div>

    {/* Texto principal con título y descripción */}
    <div class="relative md:top-[5%] top-[0%] left-[6%] z-10 px-6 text-blanco">
      <h1 class="text-3xl text-verde font-bold mb-2">Contáctanos</h1>
      <p class="mb-6 md:text-lg text-sm text-negro">No dude en pedir presupuesto de nuestros <br> productos y servicios o de consultar sus dudas</p>
    </div>

    {/* Formulario de contacto posicionado encima del fondo */}
    <div class="absolute lg:left-[60%] md:left-1/2 md:-translate-x-1/2 left-1/2 -translate-x-1/2 lg:top-[3%] md:top-[25%] z-10 2xl:w-1/3 lg:w-1/3 md:w-1/2 w-[80%] border-2 border-gray-300 bg-blanco opacity-85 rounded-sm px-12 pt-6 pb-4">
      <form id="contact-form">
        {/* Campo para nombre y apellidos */}
        <label style="display: block;">
          Nombre y apellidos:
        </label>
          <input type="text" name="nombre" class="bg-gray-400 w-full rounded-sm p-2" required />
        {/* Campo para teléfono */}
        <label style="display: block;">
          telefono:
        </label>
          <input type="text" name="telefono" class="bg-gray-400 w-full rounded-sm p-2" required />
        {/* Campo para correo electrónico */}
        <label style="display: block;">
          Tu correo:
        </label>
          <input type="email" name="email" class="bg-gray-400 w-full rounded-sm p-2"  required />
        {/* Campo para producto o servicio */}
        <label style="display: block;">
          Producto o Servicio:
        </label>
          <input type="text" name="subject" class="bg-gray-400 w-full rounded-sm p-2" required />
        {/* Campo para mensaje */}
        <label style="display: block;">
          Mensaje:
        </label>
          <textarea style="display: block;" name="message" class="bg-gray-400 w-full rounded-sm p-2" required></textarea>
        <button class="bg-verde text-blanco md:mx-0 md:inline-block block mx-auto px-4 py-1 rounded-full mt-2" type="submit">Enviar</button>
      </form>
    </div>
  </div>

  <!-- Toast de mensajes -->
  <div id="toast" class="hidden fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black text-white px-4 py-2 rounded shadow-lg z-50 transition-opacity duration-300 opacity-0"></div>

  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {

      // Obtener el parámetro 'servicio' de la URL (si existe)
      const params = new URLSearchParams(window.location.search);
      const servicio = params.get('servicio');

      // Si se recibe un servicio en la URL, asignarlo al campo 'subject' del formulario
      if (servicio) {
        const subjectInput = document.querySelector('input[name="subject"]');
        if (subjectInput) subjectInput.value = servicio;
      }

      const form = document.getElementById('contact-form');
      if (!(form instanceof HTMLFormElement)) return;

      // Función para mostrar toast
      function showToast(message, isSuccess = true) {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.classList.remove('hidden', 'opacity-0');
        toast.classList.add('opacity-100', isSuccess ? 'bg-green-600' : 'bg-red-600');

        setTimeout(() => {
          toast.classList.remove('opacity-100');
          toast.classList.add('opacity-0');
          setTimeout(() => {
            toast.classList.add('hidden');
            toast.classList.remove('bg-green-600', 'bg-red-600');
          }, 300);
        }, 3000);
      }

      form.addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(form);
        const data = {
          nombre: formData.get('nombre'),
          telefono: formData.get('telefono'),
          email: formData.get('email'),
          subject: formData.get('subject'),
          message: formData.get('message')
        };

        try {
          const response = await fetch('/api/resend', {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            showToast('Mensaje enviado correctamente.');
            form.reset();
          } else {
            showToast('Error al enviar el mensaje.', false);
          }
        } catch (err) {
          console.error(err);
          showToast('Hubo un problema al enviar el mensaje.', false);
        }
      });
    });
  </script>
</Layout>
